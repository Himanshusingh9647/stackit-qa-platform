generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  password    String
  isAdmin     Boolean   @default(false)
  isBanned    Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  questions   Question[]
  answers     Answer[]
  votes       Vote[]
  
  // Notifications
  sentNotifications     Notification[] @relation("NotificationSender")
  receivedNotifications Notification[] @relation("NotificationReceiver")
  
  @@map("users")
}

model Question {
  id          String    @id @default(cuid())
  title       String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  answers     Answer[]
  votes       Vote[]
  tags        QuestionTag[]
  notifications Notification[]
  
  @@map("questions")
}

model Answer {
  id          String    @id @default(cuid())
  content     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  authorId    String
  author      User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  
  questionId  String
  question    Question  @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  votes       Vote[]
  notifications Notification[]
  
  @@map("answers")
}

model Tag {
  id          String    @id @default(cuid())
  name        String    @unique
  color       String    @default("#3B82F6")
  createdAt   DateTime  @default(now())
  
  questions   QuestionTag[]
  
  @@map("tags")
}

model QuestionTag {
  id         String   @id @default(cuid())
  questionId String
  tagId      String
  
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, tagId])
  @@map("question_tags")
}

model Vote {
  id         String    @id @default(cuid())
  type       VoteType
  createdAt  DateTime  @default(now())
  
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  questionId String?
  question   Question? @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  answerId   String?
  answer     Answer?   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  @@unique([userId, questionId])
  @@unique([userId, answerId])
  @@map("votes")
}

enum VoteType {
  UP
  DOWN
}

model Notification {
  id          String            @id @default(cuid())
  type        NotificationType
  message     String
  isRead      Boolean           @default(false)
  createdAt   DateTime          @default(now())
  
  // Who sent the notification (can be null for system notifications)
  senderId    String?
  sender      User?             @relation("NotificationSender", fields: [senderId], references: [id], onDelete: Cascade)
  
  // Who receives the notification
  receiverId  String
  receiver    User              @relation("NotificationReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  
  // Related entities
  questionId  String?
  question    Question?         @relation(fields: [questionId], references: [id], onDelete: Cascade)
  
  answerId    String?
  answer      Answer?           @relation(fields: [answerId], references: [id], onDelete: Cascade)
  
  @@map("notifications")
}

enum NotificationType {
  ANSWER_CREATED      // Someone answered your question
  QUESTION_ANSWERED   // Someone answered a question you're following
  MENTION            // Someone mentioned you with @username
  QUESTION_VOTED     // Someone voted on your question
  ANSWER_VOTED       // Someone voted on your answer
  ADMIN_MESSAGE      // Admin notification
}
